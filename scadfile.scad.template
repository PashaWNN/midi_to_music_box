//================================
// Music Box Cylinder Generator
//================================
//
// Originally developed by gsyan ( https://gsyan888.blogspot.com/ )
// Refactor & fixes by PashaWNN ( https://github.com/PashaWNN )


/* [Global] */ 

/* [Direction Setting] */
// Bass pin is on the top (near the gear)
isTopFirst = true;

// Cylinder rotate direction
isCounterclockwise = true;


/* [Cylinder Size Setting] */
cylinderDiameter = 13;
cylinderThickness = 0.6;
cylinderHeight = 20;

//cylinder diameter cylinderTolerance
cylinderTolerance = 0.1;

/* [Combo Teeth Setting] */
comboWidth = 16.3;
teethTotalNumber = 18;

/* [Pins Size Setting] */
pinDiameter = 0.4;
pinBaseDiameter = 0.8;
pinHeight = 0.6;

// The distance between two pins
pinOffset = 0.9;

// Additional offset if same note pins are too close
enableAvoidTooNear = false;

// The position of the first pin
firstPinPosition = 1.9 + pinBaseDiameter / 4;

/* [Cylinder Bottom Setting] */
cylinderBottomDiameter = 15.3;
cylinderBottomHeight = 1;
cylinderBottomHoleD1 = 5.4;
cylinderBottomHoleD2 = 4;

/* [Cylinder Top Lock Hole Setting] */
cylinderTopHoleWidth = 3.6;
cylinderTopHoleHeight = 1;

musicScore = ${musicScore};


/* [Hidden] */


// Total number of tones
tonesTotalNumber = 18;


// generate cylinder body
module generateBody() {
	difference() {
		cylinder(d=cylinderDiameter-cylinderTolerance, h=cylinderHeight, $fn=100, center=false);

		cylinder(d=cylinderDiameter-cylinderTolerance-cylinderThickness*2, h=cylinderHeight, $fn=100, center=false);

		// top hole
		translate([cylinderDiameter/-2,cylinderTopHoleWidth/-2, cylinderHeight-cylinderTopHoleHeight])
		cube([cylinderDiameter, cylinderTopHoleWidth, cylinderTopHoleHeight]);
	}
	// bottom
	translate([0, 0, -cylinderBottomHeight])
	difference() {
		cylinder(d=cylinderBottomDiameter, h=cylinderBottomHeight, $fn=64, center=false);
		cylinder(d1=cylinderBottomHoleD1,d2=cylinderBottomHoleD2, h=cylinderBottomHeight, $fn=64, center=false);
	}
}

module generatePinsFromScore(score) {
    scoreLength = len(score);
    offsetAngle = 360 / scoreLength;

    for (i = [0:scoreLength - 1]) {
        notes = score[i];
        if (len(notes) > 0) {
            for (noteIndex = [0:len(notes) - 1]) {
                toothId = notes[noteIndex];
                angle = (isCounterclockwise ? -1 : 1) * (offsetAngle * i);
                rOffset = 0.3;  // How deep pins would protrude the cylinder
                radius = cylinderDiameter / 2 - rOffset;
                x = radius * cos(angle);
                y = radius * sin(angle);
                z = firstPinPosition + pinOffset * (isTopFirst ? (tonesTotalNumber - toothId) : toothId);
                translate([x, y, z])
                    rotate([0, 0, angle])
                        rotate([0, 90, 0])
                            cylinder(
                            d1 = pinBaseDiameter,
                            d2 = pinDiameter,
                            h = pinHeight + rOffset,
                            $fn = 20,
                            center = false
                            );
            }
        }
    }
}

module generateMusicBoxCylinder() {
	generateBody();
    generatePinsFromScore(musicScore);
}

generateMusicBoxCylinder();
